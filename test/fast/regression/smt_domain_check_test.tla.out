
\* TLAPM version 1.5.0
\* launched at 2023-11-27 14:16:22 with command line:
\* /home/ovini/Downloads/tlapm_real_altered/tlapm-main/tlapm-main/test/../tlapm -I /home/ovini/Downloads/tlapm_real_altered/tlapm-main/tlapm-main/test/../library --toolbox 0 0 --nofp smt_domain_check_test.tla --stretch 5

(* created new ".tlacache/TLAPS.tlaps/TLAPS.thy" *)
(* fingerprints written in ".tlacache/TLAPS.tlaps/fingerprints" *)
(* will not use fingerprints (because of option `--nofp`), but will now load fingerprints from the file `.tlacache/smt_domain_check_test.tlaps/fingerprints`, in order to overwrite with the new fingerprints, and then save the results at the end. *)
COMMAND-LINE ARGUMENT
file=.tlacache/smt_domain_check_test.tlaps/tlapm_ecfd94.smt; PATH='/home/ovini/Downloads/tlapm_real_altered/tlapm-main/tlapm-main/test/lib/tlaps/bin/:/home/ovini/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin:/home/ovini/Downloads/tlapm_real_altered/tlapm-main/tlapm-main:/home/ovini/Downloads/tlapm_real_altered/tlapm-main/lib/tlaps/bin'; z3 -smt2 -v:0 AUTO_CONFIG=false smt.MBQI=true "$file" >.tlacache/smt_domain_check_test.tlaps/tlapm_ecfd94.smt.out
CONTENT OF FILE SENT TO BACKEND
;; TLA+ Proof Manager 1.5.0
;; Proof obligation #1
;;   generated from file "./smt_domain_check_test.tla", line 7, characters 1-2

(set-logic UFNIA)
(declare-sort u 0)
;; Standard TLA+ operators
(declare-fun int2u (Int) u)
(declare-fun u2int (u) Int)
(declare-fun tla__Int () u)
(declare-fun tla__plus (u u) u)
(declare-fun tla__minus (u u) u)
(declare-fun tla__lt (u u) Bool)
(declare-fun tla__le (u u) Bool)
(declare-fun tla__Range (u u) u)
(declare-fun tla__in (u u) Bool)
(declare-fun tla__emptyset () u)
(declare-fun tla__isAFcn (u) Bool)
(declare-fun tla__DOMAIN (u) u)
(declare-fun tla__fcnapp (u u) u)
(declare-fun tla__unspec (u u) u)

;; Terms, predicates and strings
(declare-fun a_CONSTANTunde_Nunde_a () Int)
(declare-fun a_CONSTANTunde_funde_a () u)
(declare-fun a_CONSTANTunde_iunde_a () Int)

(assert
  (forall ((X_4 Int)) (! (= (u2int (int2u X_4)) X_4) :pattern ((int2u X_4)))))
(assert
  (forall ((X_4 u))
  (! (= (tla__in X_4 tla__Int) (exists ((N_3 Int)) (= X_4 (int2u N_3)))) :pattern ((tla__in X_4 tla__Int)))))
(assert
  (forall ((M_2 Int) (N_3 Int))
  (! (= (tla__plus (int2u M_2) (int2u N_3)) (int2u (+ M_2 N_3))) :pattern ((tla__plus (int2u M_2) (int2u N_3))))))
(assert
  (forall ((M_2 Int) (N_3 Int))
  (! (= (tla__minus (int2u M_2) (int2u N_3)) (int2u (- M_2 N_3))) :pattern ((tla__minus (int2u M_2) (int2u N_3))))))
(assert
  (forall ((M_2 Int) (N_3 Int))
  (! (= (tla__lt (int2u M_2) (int2u N_3)) (< M_2 N_3)) :pattern ((tla__lt (int2u M_2) (int2u N_3))))))
(assert
  (forall ((M_2 Int) (N_3 Int))
  (! (= (tla__le (int2u M_2) (int2u N_3)) (<= M_2 N_3)) :pattern ((tla__le (int2u M_2) (int2u N_3))))))
(assert
  (forall ((M_2 Int) (N_3 Int) (Z_6 u))
  (=
  (tla__in Z_6 (tla__Range (int2u M_2) (int2u N_3)))
  (exists ((X_4 Int)) (and (= Z_6 (int2u X_4)) (<= M_2 X_4) (<= X_4 N_3))))))
(assert
  (forall ((M_2 Int) (N_3 Int) (X_4 Int) (Y_5 Int))
  (=>
  (and
  (or (<= M_2 N_3) (<= X_4 Y_5))
  (= (tla__Range (int2u M_2) (int2u N_3)) (tla__Range (int2u X_4) (int2u Y_5))))
  (and (= M_2 X_4) (= N_3 Y_5)))))
(assert
  (forall ((M_2 Int) (N_3 Int))
  (= (= (tla__Range (int2u M_2) (int2u N_3)) tla__emptyset) (< N_3 M_2))))
(assert
  (forall ((S_7 u) (T_8 u))
  (=> (forall ((X_4 u)) (= (tla__in X_4 S_7) (tla__in X_4 T_8))) (= S_7 T_8))))
(assert
  (forall ((X_4 u))
  (! (= (tla__in X_4 tla__emptyset) false) :pattern ((tla__in X_4 tla__emptyset)))))
(assert
  (forall ((F_10 u) (G_11 u))
  (=>
  (and
  (tla__isAFcn F_10) (tla__isAFcn G_11)
  (forall ((X_4 u))
  (= (tla__in X_4 (tla__DOMAIN F_10)) (tla__in X_4 (tla__DOMAIN G_11)))))
  (= (tla__DOMAIN F_10) (tla__DOMAIN G_11)))))
(assert
  (forall ((F_10 u) (G_11 u))
  (=>
  (and
  (tla__isAFcn F_10) (tla__isAFcn G_11)
  (= (tla__DOMAIN F_10) (tla__DOMAIN G_11))
  (forall ((X_4 u))
  (=>
  (tla__in X_4 (tla__DOMAIN G_11))
  (= (tla__fcnapp F_10 X_4) (tla__fcnapp G_11 X_4)))))
  (= F_10 G_11))))

;; Theorem to be Proved
(assert (not
  (ite
    (< a_CONSTANTunde_iunde_a a_CONSTANTunde_Nunde_a)
    (ite
      (<= (+ a_CONSTANTunde_iunde_a 1) a_CONSTANTunde_Nunde_a)
      (tla__in
        (tla__fcnapp a_CONSTANTunde_funde_a (int2u a_CONSTANTunde_iunde_a))
        tla__Int)
      (tla__in
        (tla__unspec a_CONSTANTunde_funde_a (int2u a_CONSTANTunde_iunde_a))
        tla__Int)) true)))
(assert (<= 0 a_CONSTANTunde_Nunde_a))
(assert (tla__isAFcn a_CONSTANTunde_funde_a))
(assert
  (=
    (tla__DOMAIN a_CONSTANTunde_funde_a)
    (tla__Range (int2u 0) (int2u (- a_CONSTANTunde_Nunde_a 1)))))
(assert
  (forall ((a_v1a Int))
    (=>
      (and (<= 0 a_v1a) (<= (+ a_v1a 1) a_CONSTANTunde_Nunde_a))
      (tla__in (tla__fcnapp a_CONSTANTunde_funde_a (int2u a_v1a)) tla__Int))))
(assert (<= 0 a_CONSTANTunde_iunde_a))

(check-sat)
(exit)

RESULT
unsat

(* created new ".tlacache/smt_domain_check_test.tlaps/smt_domain_check_test.thy" *)
(* fingerprints written in ".tlacache/smt_domain_check_test.tlaps/fingerprints" *)
